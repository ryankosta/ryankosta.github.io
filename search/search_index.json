{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":""},{"location":"#who-am-i","title":"Who am I","text":"<p>Hello! I'm Ryan Kosta, an incoming PhD student at UC San Diego, studying Computer Science.</p> <p>I am advised by Amy Ousterhout and Alex Snoeren</p> <p>During my undergrad (also at UCSD) I was advised by Yiying Zhang and Amy Ousterhout.</p> <p>I also recently completed a summer research internship at EPFL with Edouard Bugnion (Co-founder of VMware and Nuova systems)</p>"},{"location":"#what-i-do","title":"What I do","text":"<p>My research interests span Operating Systems, Datacenter Networks, and Computer Architecture.</p> <p>In my free time I like learning languages, exploring, and occasionally playing guitar or videogames</p>"},{"location":"#contact","title":"Contact","text":"<p>Always excited to discuss research with those in industry, academia, or who are interested!</p> <p>Definitely reach out: rkosta AT ucsd.edu</p>"},{"location":"#research","title":"Research","text":"<p>Papers</p> <ol> <li>SIRD: A Sender-Informed Reciever-Driven Datacenter Transport Protocol  Konstantinos Prasopoulos, Ryan Kosta, Edouard Bugnion, Marios Kogias. 22nd USENIX Symposium on Networked Systems Design and Implementation (NSDI '25) </li> <li>SuperNIC: An FPGA-Based, Cloud-Oriented SmartNIC Will Lin*, Yizhou Shan*, Ryan Kosta, Arvind Krishnamurthy, Yiying Zhang   2024 ACM/SIGDA International Symposium on Field Programmable Gate Arrays (FPGA '24) (* equal contributors)</li> </ol> <p>Posters</p> <ol> <li>Catena: A Scheduling System for Microsecond-Level Microservice DAGs. Ryan Kosta, Amy Ousterhout, Yiying Zhang 17th USENIX Symposium on Operating Systems Design and Implementation. (OSDI 23' Poster Session) </li> <li>Consolidating Network Resources with Rack-Level Network Pooling. Will Lin, Ryan Kosta, Arvind Krishnamurthy, Yiying Zhang.   17th USENIX Symposium on Operating Systems Design and Implementation. (OSDI 23' Poster Session)</li> </ol> <p>For more information see research!</p>"},{"location":"#industry","title":"Industry","text":"2021-2022: Lead Computer Engineering intern at Education Technology Startup Haddee <ul> <li>Setup and maintain the an informational website and an educational management system </li> <li>Integrate features into the platform based on business needs </li> <li>Work with international development teams to coordinate development of a new platform </li> <li>Hire and manage a team of other interns doing similar work</li> </ul>"},{"location":"#volunteer","title":"Volunteer","text":"<ul> <li>2024-Ongoing: Volunteer (Espresso Executive) for UCSD CSE's Chez Bob</li> <li>2024-2025: Chair of event planning for UCSD Graduate Women in Computing</li> <li>2023-2024: Co-chair of event planning and publicity for UCSD Graduate Women in Computing</li> <li>2023-2024: President of Origami Folders club at UCSD </li> <li>2022 : Session Chair for WORDS 22 </li> </ul>"},{"location":"#social","title":"Social","text":"<ul> <li>Google Scholar</li> <li>Github</li> <li>LinkedIn</li> </ul>"},{"location":"#skills","title":"Skills","text":"<ul> <li>Languages: C, Python, Bash, Verilog, Java, RISC-V Assembly, Scala</li> <li>Software: SpinalHDL, VPP, OVS, Discourse, Docker, Linux </li> </ul>"},{"location":"music/setup/","title":"Guitar setup","text":"<p>My silent vintage tube amp setup.</p>"},{"location":"music/setup/#guitars","title":"Guitars","text":"<ul> <li>1979 Fender Stratocaster (Natural wood)</li> <li>2019 Fender Stratocaster (Black) </li> <li>1999 Fender Stratocaster (Silverburst)</li> <li>Fender Telecaster Deluxe Reissue</li> </ul>"},{"location":"music/setup/#amps","title":"Amps","text":"<ul> <li>Vox AC15 reissue</li> <li>1980 Fender champ </li> <li>Blues junior special edition</li> <li>Fender Super Six head (twin reverb circuit)</li> </ul>"},{"location":"music/setup/#attenuator-setup","title":"Attenuator setup","text":"<p>I use the Torpedo Captor X (8 ohms) for attenuation and cabinet emulation.</p> <p>I have it connected to a cheap Neewer mixer board allowing me to use it in stereo (with individual channel control) and mixing in audio for my computer allowing me to play along with Jam Tracks. </p> <p>I use a Shiit Modi 2 to connect my computer with the mixer board. I use the mixer headphone out with Sennheiser HD598Cs</p>"},{"location":"music/shows/","title":"Shows","text":""},{"location":"music/shows/#previous-school-of-rock-shows","title":"Previous school of rock shows","text":""},{"location":"music/shows/#1968","title":"1968","text":"Song Original Artist Part Ball and Chain Big brother and the holding company Rythym Guitar Sympathy for the Devil Rolling Stones Rythym Guitar On the road again Canned Heat Rythym Guitar"},{"location":"music/shows/#ccr-vs-the-band","title":"C.C.R. V.S. The Band","text":"Song Original Artist Part Who'll stop the rain CCR Lead Guitar I heard it through the grapevine CCR Rythym Guitar"},{"location":"music/shows/#electric-light-orchestra","title":"Electric Light Orchestra","text":"Song Original Artist Part Strange Magic ELO Second guitar Don't bring me Down ELO Second guitar"},{"location":"music/shows/#southern-rock","title":"Southern Rock","text":"Song Original Artist Part La Grange ZZ Top Lead Guitar"},{"location":"music/shows/#led-zeppelin-2-vs-4","title":"Led Zeppelin 2 V.S. 4","text":"Song Original Artist Part Whole lotta love Zeppelin Rythym Guitar Living loving Maid Zeppelin Backup Vox Rock and Roll Zeppelin Lead Guitar"},{"location":"music/shows/#tommy","title":"Tommy","text":"Song Original Artist Part 1921 The Who Lead Guitar Cousin Kevin The Who Rythym Guitar Welcome The Who Rythym Guitar Tommy can you here me The Who Harmony Vox"},{"location":"music/shows/#british-invasion","title":"British Invasion","text":"Song Original Artist Part Other part Sympathy for the devil Rolling Stones Lead Guitar Lead vocals A little help from my friends Beatles Lead Guitar Lead vocals"},{"location":"music/shows/#90s-rock","title":"90s Rock","text":"Song Original Artist Part Other part Sweater Song Weezer Lead Guitar Are you gonna go my way Lenny Kravitz Lead Guitar Lead Vocals Man in the box Alice in Chains Lead Guitar Lead Vocals Possum Kingdom The Toadies Rythym Guitar In Bloom Nirvana Rythym Guitar"},{"location":"projects/cpus/","title":"CPUs","text":""},{"location":"projects/cpus/#introduction","title":"Introduction","text":""},{"location":"projects/cpus/#what-these-are","title":"What these are","text":"<ul> <li>Not a research project</li> <li>Mostly just for fun and to get a bit accustomed to computer architecture</li> <li>The first big projects I did (incidentally making Verilog one of the first coding languages I really learned)</li> <li>These probably don't fully work. Not sure how much testing I did</li> <li>I did eventually design a fully tested CPU in a class CSE141L, though the class forbids open sourcing :(</li> </ul>"},{"location":"projects/cpus/#r100","title":"R100","text":""},{"location":"projects/cpus/#introduction_1","title":"Introduction","text":"<ul> <li>Risc-V</li> <li>Verilog</li> <li>Mostly gate level logic</li> <li>Non-pipelined</li> </ul> <p>This was my first cpu to learn simple logic design. I never tested it using full Risc-V tests rather I used smaller tests just to ensure basic functionality.</p>"},{"location":"projects/cpus/#r200","title":"R200","text":"<ul> <li>Partial redesign of r100 </li> <li>Verilog</li> <li>Pipelined </li> </ul> <p>This CPU adds pipelining. I planned on expanding it but I quickly realized the design limitations of the gate level logic used in R100. </p>"},{"location":"research/research/","title":"Research","text":"<p>I am currently researching at UC San Diego co-advised by Amy Ousterhout and Alex Snoeren </p> <p>In general, I am interested in innovating computer hardware and operating systems, and all that lies in between.</p>"},{"location":"research/research/#research-interests","title":"Research Interests","text":"<ul> <li>Operating Systems</li> <li>Datacenter Networks</li> <li>Computer Architecture </li> <li>File Systems </li> </ul>"},{"location":"research/research/#papers","title":"Papers","text":"<ol> <li>SIRD: A Sender-Informed Reciever-Driven Datacenter Transport Protocol  Konstantinos Prasopoulos, Ryan Kosta, Edouard Bugnion, Marios Kogias. 22nd USENIX Symposium on Networked Systems Design and Implementation (NSDI '25) </li> <li>SuperNIC: An FPGA-Based, Cloud-Oriented SmartNIC Will Lin*, Yizhou Shan*, Ryan Kosta, Arvind Krishnamurthy, Yiying Zhang   2024 ACM/SIGDA International Symposium on Field Programmable Gate Arrays (FPGA '24) (* equal contributors)</li> </ol>"},{"location":"research/research/#posters","title":"Posters","text":"<ol> <li>Catena: A Scheduling System for Microsecond-Level Microservice DAGs. Ryan Kosta, Amy Ousterhout, Yiying Zhang (OSDI 23' Poster Session)</li> <li>Consolidating Network Resources with Rack-Level Network Pooling. Will Lin, Ryan Kosta, Arvind Krishnamurthy, Yiying Zhang. (OSDI 23' Poster Session)</li> </ol>"},{"location":"selflearn/arch/","title":"Computer Architecture","text":""},{"location":"selflearn/arch/#introduction","title":"Introduction","text":"<ul> <li>These are my old notes (~2021) on how to study computer architecture)</li> <li>Still pretty valid, Onur Mutlu's lectures are quite comprehensive and really helped introduce me to the world of computer architecture</li> <li>Plan to update with new notes hopefully</li> </ul>"},{"location":"selflearn/arch/#reccomended-resources","title":"Reccomended resources","text":""},{"location":"selflearn/arch/#lectures","title":"Lectures","text":"<ul> <li>Onur Mutlu's classes</li> </ul>"},{"location":"selflearn/arch/#books","title":"Books","text":"Title Description Author Computer Archicture: A Quantitive Approach Describes advanced Computer Architecture concepts Patterson and Hennessey Computer Organization and Design RISC-V Edition A good introduction to computer ISAs Patterson and Hennesey"},{"location":"selflearn/arch/#tools","title":"Tools","text":""},{"location":"selflearn/arch/#testing-code-or-assembly-or-ab-testing","title":"Testing Code or Assembly or A/B Testing","text":"<ul> <li>Gnu Toolchain</li> <li>Qemu</li> <li>GDB </li> </ul>"},{"location":"selflearn/arch/#verilog-testing","title":"Verilog Testing","text":"<ul> <li>IVerilog (simple, great for starting out)</li> <li>Verilator</li> </ul>"},{"location":"selflearn/arch/#higher-level-rtl","title":"Higher level RTL","text":"<ul> <li>Spinalhdl</li> </ul>"},{"location":"selflearn/learn/","title":"Self Learning","text":""},{"location":"selflearn/learn/#introduction","title":"Introduction","text":""},{"location":"selflearn/learn/#what-these-pages-are","title":"What these pages are","text":"<ul> <li>These pages are from when I self-studied OS and Architecture</li> <li>They are good for pointing you in the right direction for undergraduate level stuff, but have not been updated to account for any of the knowledge I've picked up during my research time</li> </ul>"},{"location":"selflearn/learn/#what-i-hope-for-them-to-be-later","title":"What I hope for them to be later","text":""},{"location":"selflearn/learn/#state-of-my-current-notes","title":"State of my current Notes","text":"<ul> <li>I actually keep quite a large private repositiory of research and class notes, though since it's a personal copy I tend to use resources that I would need significant permissions for to share publically</li> <li>A portion of my notes I think would be quite useful in sharing information I compiled via going down long rabbit holes, compiled scattered info</li> <li>I hope to slowly migrate much of my private repository to my public website</li> </ul>"},{"location":"selflearn/learn/#the-model","title":"The model","text":"<ul> <li>Yizhou Shan keeps all (?) of his notes on his public website lastweek.io</li> <li>while a bit scattered, me and many other systems researchers often come across his notes when googling obscure systems topics</li> <li>I'd like my website to become a similar place where people can read about obscure stuff</li> </ul>"},{"location":"selflearn/learn/#topic-goals","title":"Topic Goals","text":"<ul> <li>Rarely discussed but important to understand hardware, like Intel/AMD on-chip interconnects</li> <li>Stuff that is well documented throughout N random paper background sections, but not fully well-documented anywhere </li> <li>Semiconductor topics important for understanding systems</li> <li>Anything that I think is interesting</li> </ul>"},{"location":"selflearn/learn/#advanced-resources","title":"Advanced resources","text":""},{"location":"selflearn/learn/#graduate-systems-course-reading-lists","title":"Graduate Systems course Reading Lists","text":"<ul> <li>Most graduate classes just post their reading list online</li> <li>These reading lists can present a guided search through otherwise not comprehensively documented topics</li> <li>Also they present a great way to get accustumed with the state of the art</li> </ul>"},{"location":"selflearn/learn/#list","title":"List","text":"<ul> <li>Operating Systems in Datacenters (UCSD CSE 291) by Amy Ousterhout<ul> <li>Discusses modern OS and datacenter techniques</li> <li>This is a fun class if you ever get a chance to take it :)</li> </ul> </li> <li>Graduate OS (UCSD CSE 221) by Amy Ousterhout<ul> <li>A multi-topic class covering many of the big papers in OS </li> </ul> </li> </ul>"},{"location":"selflearn/linux/","title":"Linux","text":"<p>For linux you have to learn by doing. Using linux will give you a big edge up by giving you better access to many development tools for hardware and software.</p>"},{"location":"selflearn/linux/#great-starting-distributions","title":"Great starting distributions","text":"Title Benefits Based on Ubuntu Popular, easy Debian Fedora Good community, also easy Red Hat Pop OS Popular, good graphics support Ubuntu/Debian"},{"location":"selflearn/linux/#the-terminal","title":"The terminal","text":"<p>I am a big fan on a simplistic user interface and frequent use of the terminal but I know this is not for everyone. However, this approach will give you a leg up on working in terminal-only environments.</p>"},{"location":"selflearn/linux/#learn-the-terminal-via-exposure","title":"Learn the terminal via exposure","text":""},{"location":"selflearn/linux/#setup","title":"Setup","text":"<ul> <li>Install a simple Window Manager like i3</li> <li>Install a simplistic terminal based text editor like vim</li> </ul>"},{"location":"selflearn/linux/#doing","title":"Doing","text":"<ul> <li>Do all of your tasks such as file moving, coding, program installation, et cetera from the terminal</li> <li>If you get confused google how to do something (also use manpages) </li> </ul> <p>This is how I still go about all of my daily tasks and I find it rather easy. If you know the commands well typing commands can often be easier then a GUI</p>"},{"location":"selflearn/os/","title":"Operating System","text":""},{"location":"selflearn/os/#introduction","title":"Introduction","text":""},{"location":"selflearn/os/#what-this-page-is","title":"What this page is","text":"<ul> <li>Originally (~2021) this was a list of how I first got into OS</li> <li>Now its a bit of a combination of how to get into OS and my musings on undergraduate OS classes</li> <li>This needs more updating</li> </ul>"},{"location":"selflearn/os/#how-os-is-traditionally-taught","title":"How OS is traditionally taught","text":"<ul> <li>Most OS classes have a \"theory\" component and a project component</li> </ul>"},{"location":"selflearn/os/#theory-component","title":"Theory Component","text":"<ul> <li>The goal of this part is to teach you the fundamental mechanisms and policies of operating systems</li> </ul>"},{"location":"selflearn/os/#stratificationstopics","title":"Stratifications/Topics","text":"<ol> <li>Virtualization / Isolation: What is a process<ul> <li>process abstraction</li> <li>context switch</li> <li>virtual memory / paging</li> <li>Note: this is really the key mechanisms part</li> </ul> </li> <li>Resource management: How do processes share resources<ul> <li>Memory allocation</li> <li>Scheduling</li> </ul> </li> <li>Synchronization: How can concurrent processes (or threads) communicate <ul> <li>Locks</li> <li>Other synchronization structures</li> </ul> </li> <li>File Systems: How do we store data </li> </ol>"},{"location":"selflearn/os/#what-is-typically-ignored","title":"What is typically ignored","text":"<ul> <li>drivers</li> <li>Network subsystem </li> </ul>"},{"location":"selflearn/os/#project-component","title":"Project component","text":""},{"location":"selflearn/os/#approach-1-build-an-os","title":"Approach 1: Build an OS","text":"<ul> <li>in this style of class, you build an OS \"from scratch\", building it up with new components as you learn throughout class</li> <li>Typically, these projects are done in a virtual environment (as OS natively runs directly on a CPU)</li> <li>Pro: Get a good feel for the low-level coding style which is OS coding</li> <li>Con: Spend a lot of time doing menial tasks, can distract from learning concepts </li> </ul>"},{"location":"selflearn/os/#approach-2-userspace-os","title":"Approach 2: Userspace OS","text":"<ul> <li>in this style of class, you build OS-related components that run in userspace</li> <li>Pro: You get to write code in a realistic environment</li> <li>Con: Don't get exposed to the low-level stuff<ul> <li>especially paging </li> </ul> </li> </ul>"},{"location":"selflearn/os/#theory","title":"Theory","text":""},{"location":"selflearn/os/#lecture-series","title":"Lecture Series","text":"<p>My favorite OS lecture series are by Prof. Geoffrey Challen. The assignments, sample exams, and lectures are all available at ops-class.</p>"},{"location":"selflearn/os/#do-it-yourself","title":"Do it yourself","text":"<p>OSDev is by and far the best resource in this aspect. I reccomend building an understanding of ISAs before beginning in this project.</p>"},{"location":"selflearn/os/#which-isa-to-choose","title":"Which ISA to choose","text":"<p>Many people choose x86 as their first ISA as it has extensive documentation. This is a solid choice, however, I think Risc-V offers a compelling open source option thats fairly easy to work with.</p>"},{"location":"selflearn/os/#tools","title":"Tools","text":"<ul> <li>Gnu toolchain (cross compiler version for target ISA) </li> <li>GDB</li> <li>Qemu</li> <li>Gnu Make </li> </ul>"},{"location":"selflearn/os/#writing-an-os-in-risc-v-resources","title":"Writing an OS in Risc-V resources","text":"Title Description Author RISC-V OS Using Rust Good tutorial of how to work with Risc-v (in rust) Stephen Marz Xv6-RISCV Source Unix-v6 in RISC-V (also availaible in x86) See Authors on readme Xv6-RISCV Book Unix-v6 in RISC-V Book documentation Russ Cox, Frans Kaashoek, Robert Morris"},{"location":"selflearn/os/#learn-about-production-operating-systems","title":"Learn about production operating systems","text":""},{"location":"selflearn/os/#comprehensive-books","title":"Comprehensive books","text":"<ul> <li>Since Operating Systems are extremely complicated, it is difficult (impossible) to find a comprehensive resource which covers all aspects of a modern OS</li> <li>That said, some books can be useful in giving either a historical perspective, or high level overview </li> </ul>"},{"location":"selflearn/os/#examples","title":"Examples","text":"Title Description Author The design of the Unix Operating System Great to learn historical (simple + fundamental) OS design choices Maurice J. Bach Design and Implementation of the 4.4BSD Operating System Covers transition into more modern OS design Kirk McKusick, Keith Bostic, Mike Karels,John Quarterman Design and Implementation of the FreeBSD Operating System (2nd edition) Covers more modern OS design Kirk McKusick, George V. Neville-Neil, Robert Watson"}]}